---
# tasks file for Restore
- name: Set Default Username
  set_fact:
    username: "admin"
  when: username is not defined  
  
- name: Set Fossul namespace 
  set_fact:
    fossul_namespace: "fossul"
  when: fossul_namespace is not defined

- name: Set Fossul policy 
  set_fact:
    policy: "daily"
  when: policy is not defined

- name: Set Fossul Server URL 
  set_fact:
    fossul_server_url: "http://fossul-server.{{ fossul_namespace }}.svc.cluster.local:8000"
  when: fossul_server_url is not defined

- name: Set Fossul Restore Cleanup 
  set_fact:
    cleanup_cr: true
  when: cleanup_cr is not defined

- name: Get Fossul Secret
  block:
  - name: Get Fossul Secret
    k8s_info:
      api_version: v1
      kind: Secret
      name: fossul-secret
      namespace: "{{ fossul_namespace }}"
    register: secret       
  - name: Get Fossul Password
    set_fact:
      fossul_password: "{{ item.value | b64decode }}" 
    with_dict: "{{ secret.resources[0].data }}"
    when: item.key == "fossul-password"

  - name: Fossul Secret Status
    operator_sdk.util.k8s_status:
      api_version: fossul.io/v1
      kind: Restore
      name: "{{ ansible_operator_meta.name }}"
      namespace: "{{ ansible_operator_meta.namespace }}"
      status:
        fossulResult: 
          secretStatus: "Fossul secret read successfully"

  rescue:
  - name: Fossul Secret Status
    operator_sdk.util.k8s_status:
      api_version: fossul.io/v1
      kind: Restore
      name: "{{ ansible_operator_meta.name }}"
      namespace: "{{ ansible_operator_meta.namespace }}"
      status:
        fossulResult: 
          secretStatus: "Problem with fossul secret, make sure fossul is installed in fossul namespace or fossul_namespace is set."

- name: Test Fossul API
  block:
  - name: Get Fossul Status
    uri:
      url: "{{fossul_server_url}}/status"
      headers:
        Content-Type: application/json
        Accept: application/json    
      method: GET
      body_format: json    
      force_basic_auth: yes
      status_code: [200]
      return_content: yes
    register: fossul_status

  - name: Update fossul status
    operator_sdk.util.k8s_status:
      api_version: fossul.io/v1
      kind: Restore
      name: "{{ ansible_operator_meta.name }}"
      namespace: "{{ ansible_operator_meta.namespace }}"
      status:
        fossulResult: 
          fossulStatus: "[{{ fossul_status.json.msg }}] [{{ fossul_status.json.version }}]"    

  rescue:
  - name: Update fossul status
    operator_sdk.util.k8s_status:
      api_version: fossul.io/v1
      kind: Restore
      name: "{{ ansible_operator_meta.name }}"
      namespace: "{{ ansible_operator_meta.namespace }}"
      status:
        fossulResult: 
          fossulStatus: "Error couldn't reach fossul API, check if fossul is deployed in fossul namespace or set fossul_namespace parameter in spec"    

- name: Start Restore Workflow Block
  block:  
  - name: Start Restore Workflow
    uri:
      url: "{{fossul_server_url}}/startRestoreWorkflow/{{ ansible_operator_meta.namespace }}/{{ deployment_name }}/{{ policy }}/{{ workflow_id }}"
      headers:
        Content-Type: application/json
        Accept: application/json    
      user: "{{username}}"
      password: "{{fossul_password}}"
      method: GET
      force_basic_auth: yes
      status_code: [200]
      return_content: yes
    register: restore
    failed_when: restore.json.result.messages[0].level == "ERROR"

  - name: Update Restore Status
    operator_sdk.util.k8s_status:
      api_version: fossul.io/v1
      kind: Restore
      name: "{{ ansible_operator_meta.name }}"
      namespace: "{{ ansible_operator_meta.namespace }}"
      status:
        fossulResult: 
          restoreStatus: "[{{ restore.json.result.messages[0].level }}] {{ restore.json.result.messages[0].message }}"  
  - name: print restore
    debug:
      msg: "{{ restore }}"        

  rescue:
  - name: print restore
    debug:
      msg: "{{ restore }}"

  - name: Update Restore Status
    operator_sdk.util.k8s_status:
      api_version: fossul.io/v1
      kind: Restore
      name: "{{ ansible_operator_meta.name }}"
      namespace: "{{ ansible_operator_meta.namespace }}"
      status:
        fossulResult: 
          restoreStatus: "[{{ restore.json.result.messages[0].level }}] {{ restore.json.result.messages[0].message }}"            

- name: Get Restore Status Block
  block:      
  - name: Get Restore Status
    uri:
      url: "{{fossul_server_url}}/getWorkflowStatus/{{ ansible_operator_meta.namespace }}/{{ deployment_name }}/{{ restore.json.id }}"
      headers:
        Content-Type: application/json
        Accept: application/json    
      user: "{{username}}"
      password: "{{fossul_password}}"
      method: GET
      force_basic_auth: yes
      status_code: [200]
      return_content: yes
    register: restore_status
    until: (restore_status.json.workflow.status == "COMPLETE") or (restore_status.json.workflow.status == "ERROR")
    failed_when: restore_status.json.workflow.status == "ERROR"
    retries: 100
    delay: 10

  - name: Remove Restore Custom Resource
    k8s:
      state: absent
      api_version: fossul.io/v1
      kind: Restore
      namespace: "{{ ansible_operator_meta.namespace }}"
      name: "{{ ansible_operator_meta.name }}" 
    when: cleanup_cr

  rescue:
  - name: print restore status
    debug:
      msg: "{{ restore_status }}"

  - name: Update Restore Status
    operator_sdk.util.k8s_status:
      api_version: fossul.io/v1
      kind: Restore
      name: "{{ ansible_operator_meta.name }}"
      namespace: "{{ ansible_operator_meta.namespace }}"
      status:
        fossulResult: 
          restoreStatus: "{{ restore_status.json.workflow.status }}" 
          lastMessage: "{{ restore_status.json.workflow.lastMessage }}"   