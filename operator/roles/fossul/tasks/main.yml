---
# Set defaults
- name: Set Container Platform 
  set_fact:
    container_platform: "openshift"
  when: container_platform is not defined

- name: Set Fossul namespace 
  set_fact:
    fossul_namespace: "{{ ansible_operator_meta.namespace }}"
  when: fossul_namespace is not defined

- name: Set Enable Routes
  set_fact:
    enable_routes: false
  when: enable_routes is not defined  

- name: Set Enable Virtual Machines
  set_fact:
    enable_virtualmachines: false
  when: enable_virtualmachines is not defined  

- name: Get Application Domain from Cluster Ingress
  k8s_info:
    api_version: config.openshift.io/v1
    kind: Ingress
    name: cluster
  when: (application_domain is undefined) and (enable_routes)
  register: ingress

- name: Set Application Domain
  set_fact:
    application_domain: "{{ ingress.resources[0].spec.domain }}"
  when: (application_domain is undefined) and (enable_routes)

- name: Set Default Username
  set_fact:
    username: "admin"
  when: username is not defined  

- name: Print application domain
  debug:
    msg: "Application Domain: {{ application_domain }}"
  when: (application_domain is defined) and (enable_routes)

- name: Get Fossul Secret
  k8s_info:
    api_version: v1
    kind: Secret
    name: fossul-secret
    namespace: "{{ fossul_namespace }}"
  register: secret_exists     

- name: Create Fossul Password
  set_fact:
    fossul_password: "{{ lookup('password', '/dev/null length=12') }}"

# Create clusterrole
- name: Create Fossul Cluster Role
  k8s:
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        name: fossul
      rules:
      - apiGroups:
        - "fossul.io"
        resources:
        - '*'
        verbs:
        - '*'
      - apiGroups:
        - "storage.k8s.io"
        resources:
        - '*'
        verbs:
        - '*'        
      - apiGroups:
        - "snapshot.storage.k8s.io"
        resources:
        - '*'
        verbs:
        - '*'
      - apiGroups:
        - ""
        resources:
        - pods
        - pods/exec
        - persistentvolumeclaims
        - persistentvolumes
        verbs:
        - '*'
      - apiGroups:
        - "apps"
        resources:
        - deployments
        verbs:
        - '*'
      - apiGroups:
        - "apps.openshift.io"
        resources:
        - deploymentconfigs
        verbs:
        - '*'
      - apiGroups:
        - authentication.k8s.io
        resources:
        - tokenreviews
        verbs:
        - create
      - apiGroups:
        - authorization.k8s.io
        resources:
        - subjectaccessreviews
        verbs:
        - create
  when: (container_platform is defined) and (container_platform == "openshift") 

- name: Create Fossul Cluster Role
  k8s:
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        name: fossul
      rules:
      - apiGroups:
        - "fossul.io"
        resources:
        - '*'
        verbs:
        - '*'
      - apiGroups:
        - "storage.k8s.io"
        resources:
        - '*'
        verbs:
        - '*'        
      - apiGroups:
        - "snapshot.storage.k8s.io"
        resources:
        - '*'
        verbs:
        - '*'
      - apiGroups:
        - ""
        resources:
        - pods
        - pods/exec
        - persistentvolumeclaims
        - persistentvolumes
        verbs:
        - '*'
      - apiGroups:
        - "apps"
        resources:
        - deployments
        verbs:
        - '*'
      - apiGroups:
        - authentication.k8s.io
        resources:
        - tokenreviews
        verbs:
        - create
      - apiGroups:
        - authorization.k8s.io
        resources:
        - subjectaccessreviews
        verbs:
        - create
  when: (container_platform is defined) and (container_platform == "k8s") 

- name: Create Fossul Cluster Role Binding
  k8s:
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: fossul
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: fossul
      subjects:
      - kind: ServiceAccount
        name: default
        namespace: "{{ ansible_operator_meta.namespace }}"

- name: Update Fossul Cluster Role for Virtual Machine
  k8s:
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        name: fossul
      rules:
      - apiGroups:
        - "fossul.io"
        resources:
        - '*'
        verbs:
        - '*'
      - apiGroups:
        - "snapshot.storage.k8s.io"
        resources:
        - '*'
        verbs:
        - '*'        
      - apiGroups:
        - "snapshot.storage.k8s.io"
        resources:
        - '*'
        verbs:
        - '*'
      - apiGroups:
        - ""
        resources:
        - pods
        - pods/exec
        - persistentvolumeclaims
        - persistentvolumes
        verbs:
        - '*'
      - apiGroups:
        - "apps"
        resources:
        - deployments
        verbs:
        - '*'
      - apiGroups:
        - "apps.openshift.io"
        resources:
        - deploymentconfigs
        verbs:
        - '*'
      - apiGroups:
        - authentication.k8s.io
        resources:
        - tokenreviews
        verbs:
        - create
      - apiGroups:
        - authorization.k8s.io
        resources:
        - subjectaccessreviews
        verbs:
        - create      
      - apiGroups:
        - "kubevirt.io"
        resources:
        - 'virtualmachines'
        - 'virtualmachinesnapshots'
        verbs:
        - '*'
      - apiGroups:
        - "subresources.kubevirt.io"
        resources:
        - '*'
        verbs:
        - '*'        
  when: enable_virtualmachines      

# tasks for fossul server
- name: Deploy Fossul Security Context
  k8s:
    definition:
      apiVersion: security.openshift.io/v1
      kind: SecurityContextConstraints
      metadata:
        name: fossul-scc
        namespace: "{{ ansible_operator_meta.namespace }}"
        labels:
          app: fossul-scc
      allowHostDirVolumePlugin: false
      allowHostIPC: false
      allowHostNetwork: false
      allowHostPID: false
      allowHostPorts: false
      allowPrivilegeEscalation: true
      allowPrivilegedContainer: false
      defaultAddCapabilities: null
      allowedCapabilities: null
      fsGroup:
        type: RunAsAny
      runAsUser:
        type: MustRunAs
        uid: 1001
      seLinuxContext:
        type: MustRunAs
      supplementalGroups:
        type: RunAsAny
      users:
      - system:serviceaccount:{{ ansible_operator_meta.namespace }}:default
      volumes:
      - configMap
      - downwardAPI
      - emptyDir
      - persistentVolumeClaim
      - projected
      - secret
  when: (container_platform is defined) and (container_platform == "openshift") 
- name: Deploy Fossul Secret
  k8s:
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: fossul-secret
        namespace: "{{ ansible_operator_meta.namespace }}"
      stringData:
        fossul-password: "{{fossul_password}}"
  when: secret_exists.resources[0] is not defined      
- name: Deploy Fossul Server persistent volume
  k8s:
    definition:
      apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        namespace: "{{ ansible_operator_meta.namespace }}"
        name: fossul-server-data
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 10Gi        
- name: Deploy Fossul Server
  k8s:
    definition:
      kind: Deployment
      apiVersion: apps/v1
      metadata:
        name: fossul-server
        namespace: "{{ ansible_operator_meta.namespace }}"
        labels:
          app: fossul-server
      spec:
        replicas: 1
        strategy:
          type: RollingUpdate
        selector:
          matchLabels:
            app: fossul-server
        template:
          metadata:
            labels:
              app: fossul-server
              name: fossul-server
          spec:
            containers:
            - env:
              - name: FOSSUL_PASSWORD
                valueFrom:
                  secretKeyRef:
                    key: fossul-password
                    name: fossul-secret
              - name: FOSSUL_USER
                value: "{{username}}"
              - name: FOSSUL_NAMESPACE
                value: "{{ ansible_operator_meta.namespace }}"                
              image: quay.io/fossul/fossul-server:v0.6.0
              imagePullPolicy: Always
              name: fossul-server  
              readinessProbe:
                httpGet:
                  path: /status
                  port: 8000
                  scheme: HTTP
                initialDelaySeconds: 10
                timeoutSeconds: 10
                periodSeconds: 15
                successThreshold: 1
                failureThreshold: 3              
              livenessProbe:
                httpGet:
                  path: /status
                  port: 8000
                  scheme: HTTP
                initialDelaySeconds: 10
                timeoutSeconds: 10
                periodSeconds: 30
                successThreshold: 1
                failureThreshold: 3              
              ports:
              - containerPort: 8000
              volumeMounts:
              - mountPath: /opt/app-root/metadata
                name: data  
            volumes:
            - name: data
              persistentVolumeClaim:
                claimName: fossul-server-data   
            securityContext:
              fsGroup: 1001                                        
            restartPolicy: Always
        triggers:
        - type: ConfigChange
- name: Deploy Fossul Server service
  k8s:
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        namespace: "{{ ansible_operator_meta.namespace }}"
        labels:
          app: fossul-server
        name: fossul-server
      spec:
        ports:
        - port: 8000
          targetPort: 8000
        selector:
          app: fossul-server
          name: fossul-server
      status:
        loadBalancer: {}
- name: Deploy Fossul Server route
  k8s:
    definition:
      apiVersion: route.openshift.io/v1
      kind: Route
      metadata:
        namespace: "{{ ansible_operator_meta.namespace }}"
        annotations:
          openshift.io/host.generated: "true"
        name: fossul-server
      spec:
        host: "fossul-server-{{ ansible_operator_meta.namespace }}.{{application_domain}}"
        port:
          targetPort: 8000
        tls:
          insecureEdgeTerminationPolicy: Redirect
          termination: edge
        to:
          kind: Service
          name: fossul-server
          weight: 100
        wildcardPolicy: None
  when: (application_domain is defined) and (enable_routes)      

# tasks for fossul apps
- name: Deploy Fossul Apps
  k8s:
    definition:
      kind: Deployment
      apiVersion: apps/v1
      metadata:
        name: fossul-app
        namespace: "{{ ansible_operator_meta.namespace }}"
        labels:
          app: fossul-app
      spec:
        replicas: 1
        strategy:
          type: RollingUpdate
        selector:
          matchLabels:
            app: fossul-app
        template:
          metadata:
            labels:
              app: fossul-app
              name: fossul-app
          spec:
            containers:
            - env:
              - name: FOSSUL_PASSWORD
                valueFrom:
                  secretKeyRef:
                    key: fossul-password
                    name: fossul-secret
              - name: FOSSUL_USER
                value: "{{username}}"
              - name: FOSSUL_NAMESPACE
                value: "{{ ansible_operator_meta.namespace }}"                   
              image: quay.io/fossul/fossul-app:v0.6.0
              imagePullPolicy: Always
              name: fossul-app
              readinessProbe:
                httpGet:
                  path: /status
                  port: 8001
                  scheme: HTTP
                initialDelaySeconds: 10
                timeoutSeconds: 10
                periodSeconds: 15
                successThreshold: 1
                failureThreshold: 3              
              livenessProbe:
                httpGet:
                  path: /status
                  port: 8001
                  scheme: HTTP
                initialDelaySeconds: 10
                timeoutSeconds: 10
                periodSeconds: 30
                successThreshold: 1
                failureThreshold: 3 
              ports:
              - containerPort: 8001
            restartPolicy: Always
            securityContext:
              fsGroup: 1001             
        triggers:
        - type: ConfigChange
- name: Deploy Fossul App service
  k8s:
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        namespace: "{{ ansible_operator_meta.namespace }}"
        labels:
          app: fossul-app
        name: fossul-app
      spec:
        ports:
        - port: 8001
          targetPort: 8001
        tls:
          insecureEdgeTerminationPolicy: Redirect
          termination: edge          
        selector:
          app: fossul-app
          name: fossul-app
      status:
- name: Deploy Fossul App route
  k8s:
    definition:
      apiVersion: route.openshift.io/v1
      kind: Route
      metadata:
        namespace: "{{ ansible_operator_meta.namespace }}"
        annotations:
          openshift.io/host.generated: "true"
        name: fossul-app
      spec:
        host: "fossul-app-{{ ansible_operator_meta.namespace }}.{{application_domain}}"
        port:
          targetPort: 8001
        to:
          kind: Service
          name: fossul-app
          weight: 100
        wildcardPolicy: None
  when: (application_domain is defined) and (enable_routes)              

# tasks for fossul storage
- name: Deploy Fossul Storage persistent volume
  k8s:
    definition:
      apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        namespace: "{{ ansible_operator_meta.namespace }}"
        name: fossul-storage-data
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 10Gi  
- name: Deploy Fossul Storage
  k8s:
    definition:
      kind: Deployment
      apiVersion: apps/v1
      metadata:
        name: fossul-storage
        namespace: "{{ ansible_operator_meta.namespace }}"
        labels:
          app: fossul-storage
      spec:
        replicas: 1
        strategy:
          type: RollingUpdate
        selector:
          matchLabels:
            app: fossul-storage
        template:
          metadata:
            labels:
              app: fossul-storage
              name: fossul-storage
          spec:
            containers:
            - env:
              - name: FOSSUL_PASSWORD
                valueFrom:
                  secretKeyRef:
                    key: fossul-password
                    name: fossul-secret
              - name: FOSSUL_USER
                value: "{{username}}}"
              - name: FOSSUL_NAMESPACE
                value: "{{ ansible_operator_meta.namespace }}"                   
              image: quay.io/fossul/fossul-storage:v0.6.0
              imagePullPolicy: Always
              name: fossul-storage
              readinessProbe:
                httpGet:
                  path: /status
                  port: 8002
                  scheme: HTTP
                initialDelaySeconds: 10
                timeoutSeconds: 10
                periodSeconds: 15
                successThreshold: 1
                failureThreshold: 3              
              livenessProbe:
                httpGet:
                  path: /status
                  port: 8002
                  scheme: HTTP
                initialDelaySeconds: 10
                timeoutSeconds: 10
                periodSeconds: 30
                successThreshold: 1
                failureThreshold: 3 
              ports:
              - containerPort: 8002
              volumeMounts:
              - mountPath: /opt/app-root/data
                name: data  
            volumes:
            - name: data
              persistentVolumeClaim:
                claimName: fossul-storage-data                           
            restartPolicy: Always
            securityContext:
              fsGroup: 1001             
        triggers:
        - type: ConfigChange
- name: Deploy Fossul Storage service
  k8s:
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        namespace: "{{ ansible_operator_meta.namespace }}"
        labels:
          app: fossul-storage
        name: fossul-storage
      spec:
        ports:
        - port: 8002
          targetPort: 8002
        selector:
          app: fossul-storage
          name: fossul-storage
      status:
        loadBalancer: {}    
- name: Deploy Fossul Storage route
  k8s:
    definition:
      apiVersion: route.openshift.io/v1
      kind: Route
      metadata:
        namespace: "{{ ansible_operator_meta.namespace }}"
        annotations:
          openshift.io/host.generated: "true"
        name: fossul-storage
      spec:
        host: "fossul-storage-{{ ansible_operator_meta.namespace }}.{{application_domain}}"
        port:
          targetPort: 8002
        tls:
          insecureEdgeTerminationPolicy: Redirect
          termination: edge          
        to:
          kind: Service
          name: fossul-storage
          weight: 100
        wildcardPolicy: None
  when: (application_domain is defined) and (enable_routes)      

- name: Deploy Fossul CLI
  k8s:
    definition:
      kind: Deployment
      apiVersion: apps/v1
      metadata:
        name: fossul-cli
        namespace: "{{ ansible_operator_meta.namespace }}"
        labels:
          app: fossul-cli
      spec:
        replicas: 1
        strategy:
          type: RollingUpdate
        selector:
          matchLabels:
            app: fossul-cli
        template:
          metadata:
            labels:
              app: fossul-cli
              name: fossul-cli
          spec:
            containers:
            - env:
              - name: FOSSUL_PASSWORD
                valueFrom:
                  secretKeyRef:
                    key: fossul-password
                    name: fossul-secret
              - name: FOSSUL_USER
                value: "{{username}}"
              - name: FOSSUL_NAMESPACE
                value: "{{ ansible_operator_meta.namespace }}"                   
              image: quay.io/fossul/fossul-cli:v0.6.0
              imagePullPolicy: Always
              name: fossul-cli  
            securityContext:
              fsGroup: 1001                                        
            restartPolicy: Always
        triggers:
        - type: ConfigChange