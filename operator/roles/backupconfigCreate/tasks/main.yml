---
# tasks file for BackupConfig
- name: Set Container Platform 
  set_fact:
    container_platform: "openshift"
  when: container_platform is not defined

- name: Set Default Username
  set_fact:
    username: "admin"
  when: username is not defined  
  
- name: Set Fossul namespace 
  set_fact:
    fossul_namespace: "fossul"
  when: fossul_namespace is not defined

- name: Set Fossul policy 
  set_fact:
    policy: "daily"
  when: policy is not defined

- name: Set Fossul retention 
  set_fact:
    retention: 7
  when: retention is not defined  

- name: Set Fossul app plugin 
  set_fact:
    app_plugin: ""
  when: app_plugin is not defined    

- name: Set Fossul archive plugin 
  set_fact:
    archive_plugin: ""
  when: archive_plugin is not defined    

- name: Set Fossul job retention 
  set_fact:
    job_retention: 50
  when: job_retention is not defined      

- name: Disable Restore Hooks
  set_fact:
    disable_restore_hooks: "false"
  when: disable_restore_hooks is not defined    

- name: Set Fossul auto discovery
  set_fact:
    auto_discovery: "false"
  when: auto_discovery is not defined    

- name: Set Fossul pod selector
  set_fact:
    pod_selector: ""
  when: pod_selector is not defined   

- name: Set Fossul pvc deletion timeout
  set_fact:
    pvc_deletion_timeout: "300"
  when: pvc_deletion_timeout is not defined

- name: Set Fossul snapshot timeout
  set_fact:
    snapshot_timeout: "180"
  when: snapshot_timeout is not defined

- name: Set Fossul pvc overwrite
  set_fact:
    overwrite_pvc_on_restore: "false"
  when: overwrite_pvc_on_restore is not defined

- name: Set Fossul pvc restore target
  set_fact:
    restore_to_new_pvc: "false"
  when: restore_to_new_pvc is not defined      

- name: Set Fossul App Quiesce Command
  set_fact:
    app_quiesce_cmd: ""
  when: app_quiesce_cmd is not defined    

- name: Set Fossul App UnQuiesce Command
  set_fact:
    app_unquiesce_cmd: ""
  when: app_unquiesce_cmd is not defined

- name: Set Fossul Backup Create Command
  set_fact:
    backup_create_cmd: ""
  when: backup_create_cmd is not defined          

- name: Set Fossul Pre App Quiesce Command
  set_fact:
    pre_app_quiesce_cmd: ""
  when: pre_app_quiesce_cmd is not defined 

- name: Set Fossul Post App Quiesce Command
  set_fact:
    post_app_quiesce_cmd: ""
  when: post_app_quiesce_cmd is not defined         

- name: Set Fossul Pre App UnQuiesce Command
  set_fact:
    pre_app_unquiesce_cmd: ""
  when: pre_app_unquiesce_cmd is not defined 

- name: Set Fossul Post App UnQuiesce Command
  set_fact:
    post_app_unquiesce_cmd: ""
  when: post_app_unquiesce_cmd is not defined   

- name: Set Mysql Host 
  set_fact:
    mysql_host: mariadb.{{ ansible_operator_meta.namespace }}.svc.cluster.local
  when: mysql_host is not defined     

- name: Set Mysql Port 
  set_fact:
    mysql_port: 3306
  when: mysql_port is not defined   

- name: Set Postgresql Host 
  set_fact:
    pq_host: postgresql.{{ ansible_operator_meta.namespace }}.svc.cluster.local
  when: pq_host is not defined     

- name: Set Postgresql Port 
  set_fact:
    pq_port: 5432
  when: pq_port is not defined      

- name: Set Postgresql Secret 
  set_fact:
    postgresql_secret: postgresql
  when: postgresql_secret is not defined               

- name: Set Mariadb Secret 
  set_fact:
    mariadb_secret: mariadb
  when: mariadb_secret is not defined               

- name: Set Fossul Server URL 
  set_fact:
    fossul_server_url: "http://fossul-server.{{ fossul_namespace }}.svc.cluster.local:8000"
  when: fossul_server_url is not defined

- name: Set Default Fossul Storage Plugin 
  set_fact:
    storage_plugin: "csi.so"
  when: storage_plugin is not defined  

- name: Get Fossul Secret
  block:
  - name: Get Fossul Secret
    k8s_info:
      api_version: v1
      kind: Secret
      name: fossul-secret
      namespace: "{{ fossul_namespace }}"
    register: secret        
  - name: Get Fossul Password
    set_fact:
      fossul_password: "{{ item.value | b64decode }}" 
    with_dict: "{{ secret.resources[0].data }}"
    when: item.key == "fossul-password"

  - name: Fossul Secret Status
    operator_sdk.util.k8s_status:
      api_version: fossul.io/v1
      kind: BackupConfig
      name: "{{ ansible_operator_meta.name }}"
      namespace: "{{ ansible_operator_meta.namespace }}"
      status:
        fossulResult: 
          fossulSecretStatus: "Fossul secret read successfully"

  rescue:
  - name: Fossul Secret Status
    operator_sdk.util.k8s_status:
      api_version: fossul.io/v1
      kind: BackupConfig
      name: "{{ ansible_operator_meta.name }}"
      namespace: "{{ ansible_operator_meta.namespace }}"
      status:
        fossulResult: 
          fossulSecretStatus: "Problem with fossul secret, make sure fossul is installed in fossul namespace or fossul_namespace is set."

- name: Get Mariadb Secret
  block:
  - name: Get Mariadb Secret
    k8s_info:
      api_version: v1
      kind: Secret
      name: "{{ mariadb_secret }}"
      namespace: "{{ ansible_operator_meta.namespace }}"
    register: mysql_secret
    when: (app_plugin is defined) and (app_plugin == "mariadb.so")  

  - name: Get Mariadb Database 
    set_fact:
      mysql_db: "{{ item.value | b64decode }}" 
    with_dict: "{{ mysql_secret.resources[0].data }}"
    when: (app_plugin == "mariadb.so") and (mysql_db is not defined) and (item.key == "database-name")

  - name: Get Mariadb Root Password 
    set_fact:
      mysql_root_password: "{{ item.value | b64decode }}" 
    with_dict: "{{ mysql_secret.resources[0].data }}"
    when: (app_plugin == "mariadb.so") and (mysql_root_password is not defined) and (item.key == "database-root-password")          

  - name: Mariadb Secret Status
    operator_sdk.util.k8s_status:
      api_version: fossul.io/v1
      kind: BackupConfig
      name: "{{ ansible_operator_meta.name }}"
      namespace: "{{ ansible_operator_meta.namespace }}"
      status:
        fossulResult: 
          mariadbSecretStatus: "Mariadb secret read successfully"    
    when: (app_plugin == "mariadb.so")

  rescue:
  - name: Mariadb Secret Status
    operator_sdk.util.k8s_status:
      api_version: fossul.io/v1
      kind: BackupConfig
      name: "{{ ansible_operator_meta.name }}"
      namespace: "{{ ansible_operator_meta.namespace }}"
      status:
        fossulResult: 
          mariadbSecretStatus: "Problem with mariadb secret, make sure CRs are created in the right namespaces or provide postgresql_secret parameter. Ensure database-name and root-password are set in secret."

- name: Get PostgreSQL Secret
  block:
  - name: Get Postgresql Secret
    k8s_info:
      api_version: v1
      kind: Secret
      name: "{{ postgresql_secret }}"
      namespace: "{{ ansible_operator_meta.namespace }}"
    register: pq_secret
    when: (app_plugin is defined) and (app_plugin == "postgres.so")        

  - name: Get Postgresql Database 
    set_fact:
      pq_db: "{{ item.value | b64decode }}" 
    with_dict: "{{ pq_secret.resources[0].data }}"
    when: (app_plugin == "postgres.so") and (pq_db is not defined) and (item.key == "database-name")

  - name: Get Postgresql User 
    set_fact:
      pq_user: "{{ item.value | b64decode }}" 
    with_dict: "{{ pq_secret.resources[0].data }}"
    when: (app_plugin == "postgres.so") and (pq_user is not defined) and (item.key == "database-user")

  - name: Get Postgresql Password 
    set_fact:
      pq_password: "{{ item.value | b64decode }}" 
    with_dict: "{{ pq_secret.resources[0].data }}"
    when: (app_plugin == "postgres.so") and (pq_password is not defined) and (item.key == "database-password")   

  - name: PostgreSQL Secret Status
    operator_sdk.util.k8s_status:
      api_version: fossul.io/v1
      kind: BackupConfig
      name: "{{ ansible_operator_meta.name }}"
      namespace: "{{ ansible_operator_meta.namespace }}"
      status:
        fossulResult: 
          postgresqlSecretStatus: "Postgresql secret read successfully"   
    when: (app_plugin == "postgres.so")  

  rescue:
  - name: PostgreSQL Secret Status
    operator_sdk.util.k8s_status:
      api_version: fossul.io/v1
      kind: BackupConfig
      name: "{{ ansible_operator_meta.name }}"
      namespace: "{{ ansible_operator_meta.namespace }}"
      status:
        fossulResult: 
          postgresqlSecretStatus: "Problem with postgressql secret, make sure CRs are created in the right namespaces or provide postgresql_secret parameter. Ensure database-name, database-user and database-password are set in secret."   

- name: Test Fossul API
  block:
  - name: Get Fossul Status
    uri:
      url: "{{fossul_server_url}}/status"
      headers:
        Content-Type: application/json
        Accept: application/json    
      method: GET
      body_format: json    
      force_basic_auth: yes
      status_code: [200]
      return_content: yes
    register: fossul_status

  - name: Update fossul status
    operator_sdk.util.k8s_status:
      api_version: fossul.io/v1
      kind: BackupConfig
      name: "{{ ansible_operator_meta.name }}"
      namespace: "{{ ansible_operator_meta.namespace }}"
      status:
        fossulResult: 
          fossulStatus: "[{{ fossul_status.json.msg }}] [{{ fossul_status.json.version }}]"    

  rescue:
  - name: Update fossul status
    operator_sdk.util.k8s_status:
      api_version: fossul.io/v1
      kind: BackupConfig
      name: "{{ ansible_operator_meta.name }}"
      namespace: "{{ ansible_operator_meta.namespace }}"
      status:
        fossulResult: 
          fossulStatus: "Error couldn't reach fossul API, check if fossul is deployed in fossul namespace or set fossul_namespace parameter in spec"    

- name: Create Backup Profile Block
  block:
  - name: Create Backup Profile
    uri:
      url: "{{fossul_server_url}}/addProfile/{{ ansible_operator_meta.namespace }}"
      headers:
        Content-Type: application/json
        Accept: application/json    
      user: "{{username}}"
      password: "{{fossul_password}}"
      method: GET
      force_basic_auth: yes
      status_code: [200]
      return_content: yes
    register: profile
    failed_when: profile.json.messages[0].level == "ERROR"

  - name: Update profile status
    operator_sdk.util.k8s_status:
      api_version: fossul.io/v1
      kind: BackupConfig
      name: "{{ ansible_operator_meta.name }}"
      namespace: "{{ ansible_operator_meta.namespace }}"
      status:
        fossulResult: 
          profileStatus: "[{{ profile.json.messages[0].level }}] {{ profile.json.messages[0].message }}"  

  rescue:
  - name: print profile
    debug:
      msg: "{{ profile }}"

  - name: Update profile status
    operator_sdk.util.k8s_status:
      api_version: fossul.io/v1
      kind: BackupConfig
      name: "{{ ansible_operator_meta.name }}"
      namespace: "{{ ansible_operator_meta.namespace }}"
      status:
        fossulResult: 
          profileStatus: "[{{ profile.json.messages[0].level }}] {{ profile.json.messages[0].message }}"           

- name: Create Backup Config Block
  block:
  - name: Create Backup Config
    uri:
      url: "{{fossul_server_url}}/addConfig/{{ ansible_operator_meta.namespace }}/{{ deployment_name }}"
      headers:
        Content-Type: application/json
        Accept: application/json    
      user: "{{username}}"
      password: "{{fossul_password}}"
      method: POST
      body: "{ \"accessWithinCluster\": \"true\",
               \"appPlugin\": \"{{ app_plugin }}\",
               \"storagePlugin\": \"{{ storage_plugin }}\",
               \"archivePlugin\": \"{{ archive_plugin }}\",
               \"containerPlatform\": \"{{ container_platform }}\",
               \"jobRetention\": {{ job_retention }},
               \"autoDiscovery\": {{ auto_discovery | lower }},
               \"backupRetentions\": {{ policies }},
               \"PreAppQuiesceCmd\": \"{{ pre_app_quiesce_cmd }}\",
               \"AppQuiesceCmd\": \"{{ app_quiesce_cmd }}\",
               \"PostAppQuiesceCmd\": \"{{ post_app_quiesce_cmd }}\",
               \"BackupCreateCmd\": \"{{ backup_create_cmd }}\",
               \"PreAppUnQuiesceCmd\": \"{{ pre_app_unquiesce_cmd }}\",
               \"AppUnQuiesceCmd\": \"{{ app_unquiesce_cmd }}\",
               \"PostAppUnQuiesceCmd\": \"{{ post_app_unquiesce_cmd }}\",
       }"
      body_format: json    
      force_basic_auth: yes
      status_code: [200]
      return_content: yes
    register: config
    failed_when: config.json.messages[0].level == "ERROR"

  - name: Update backup config status
    operator_sdk.util.k8s_status:
      api_version: fossul.io/v1
      kind: BackupConfig
      name: "{{ ansible_operator_meta.name }}"
      namespace: "{{ ansible_operator_meta.namespace }}"
      status:
        fossulResult: 
          backupConfigStatus: "[{{ config.json.messages[0].level }}] {{ config.json.messages[0].message }}"    

  rescue:
  - name: print config
    debug:
      msg: "{{ config }}"

  - name: Update backup config status
    operator_sdk.util.k8s_status:
      api_version: fossul.io/v1
      kind: BackupConfig
      name: "{{ ansible_operator_meta.name }}"
      namespace: "{{ ansible_operator_meta.namespace }}"
      status:
        fossulResult: 
          backupConfigStatus: "[{{ config.json.messages[0].level }}] {{ config.json.messages[0].message }}"        

- name: Create Kubevirt App Plugin Config Block
  block:    
  - name: Create Kubevirt App Plugin Config
    uri:
      url: "{{fossul_server_url}}/addPluginConfig/{{ ansible_operator_meta.namespace }}/{{ deployment_name }}/{{ app_plugin }}"
      headers:
        Content-Type: application/json
        Accept: application/json    
      user: "{{username}}"
      password: "{{fossul_password}}"
      method: POST
      body: "{ \"Namespace\": \"{{ ansible_operator_meta.namespace }}\",
               \"VmName\": \"{{ deployment_name }}\",
               \"PodSelector\": \"{{ pod_selector }}\",
       }"
      body_format: json    
      force_basic_auth: yes
      status_code: [200]
      return_content: yes
    register: kubevirt_config
    when: (app_plugin is defined) and (app_plugin == "kubevirt.so")
    failed_when: kubevirt_config.json.messages[0].level == "ERROR"         


  - name: Update kubevirt app config status
    operator_sdk.util.k8s_status:
      api_version: fossul.io/v1
      kind: BackupConfig
      name: "{{ ansible_operator_meta.name }}"
      namespace: "{{ ansible_operator_meta.namespace }}"
      status:
        fossulResult: 
          appConfigStatus: "[{{ kubevirt_config.json.messages[0].level }}] {{ kubevirt_config.json.messages[0].message }}"
    when: (app_plugin is defined) and (app_plugin == "kubevirt.so")  

  rescue:
  - name: print kubevirt app config
    debug:
      msg: "{{ kubevirt_config }}"  
    when: (app_plugin is defined) and (app_plugin == "kubevirt.so")

  - name: Update kubevirt app config status
    operator_sdk.util.k8s_status:
      api_version: fossul.io/v1
      kind: BackupConfig
      name: "{{ ansible_operator_meta.name }}"
      namespace: "{{ ansible_operator_meta.namespace }}"
      status:
        fossulResult: 
          appConfigStatus: "[{{ kubevirt_config.json.messages[0].level }}] {{ kubevirt_config.json.messages[0].message }}"
    when: (app_plugin is defined) and (app_plugin == "kubevirt.so")        

- name: Create Mariadb App Plugin Config Block
  block:
  - name: Create Mariadb App Plugin Config
    uri:
      url: "{{fossul_server_url}}/addPluginConfig/{{ ansible_operator_meta.namespace }}/{{ deployment_name }}/{{ app_plugin }}"
      headers:
        Content-Type: application/json
        Accept: application/json    
      user: "{{username}}"
      password: "{{fossul_password}}"
      method: POST
      body: "{ \"Namespace\": \"{{ ansible_operator_meta.namespace }}\",
               \"DeploymentType\": \"{{ deployment_type }}\",
               \"DeploymentName\": \"{{ deployment_name }}\",
               \"DisableRestoreHooks\": \"{{ disable_restore_hooks | lower }}\",
               \"MysqlProto\": \"tcp\",
               \"MysqlHost\": \"{{ mysql_host }}\",
               \"MysqlPort\": \"{{ mysql_port }}\",
               \"MysqlUser\": \"root\",
               \"MysqlPassword\": \"{{ mysql_root_password }}\",
               \"MysqlDb\": \"{{ mysql_db }}\",
               \"PodSelector\": \"{{ pod_selector }}\",
       }"
      body_format: json    
      force_basic_auth: yes
      status_code: [200]
      return_content: yes
    register: mariadb_config
    when: (app_plugin is defined) and (app_plugin == "mariadb.so")
    failed_when: mariadb_config.json.messages[0].level == "ERROR"

  - name: Update mariadb app config status
    operator_sdk.util.k8s_status:
      api_version: fossul.io/v1
      kind: BackupConfig
      name: "{{ ansible_operator_meta.name }}"
      namespace: "{{ ansible_operator_meta.namespace }}"
      status:
        fossulResult: 
          appConfigStatus: "[{{ mariadb_config.json.messages[0].level }}] {{ mariadb_config.json.messages[0].message }}"
    when: (app_plugin is defined) and (app_plugin == "mariadb.so")   

  rescue:
  - name: print mariadb app config
    debug:
      msg: "{{ mariadb_config }}"  
    when: (app_plugin is defined) and (app_plugin == "mariadb.so")

  - name: Update mariadb app config status
    operator_sdk.util.k8s_status:
      api_version: fossul.io/v1
      kind: BackupConfig
      name: "{{ ansible_operator_meta.name }}"
      namespace: "{{ ansible_operator_meta.namespace }}"
      status:
        fossulResult: 
          appConfigStatus: "[{{ mariadb_config.json.messages[0].level }}] {{ mariadb_config.json.messages[0].message }}"
    when: (app_plugin is defined) and (app_plugin == "mariadb.so")      

- name: Create Postgresql App Plugin Config Block
  block:
  - name: Create Postgresql App Plugin Config
    uri:
      url: "{{fossul_server_url}}/addPluginConfig/{{ ansible_operator_meta.namespace }}/{{ deployment_name }}/{{ app_plugin }}"
      headers:
        Content-Type: application/json
        Accept: application/json    
      user: "{{username}}"
      password: "{{fossul_password}}"
      method: POST
      body: "{ \"Namespace\": \"{{ ansible_operator_meta.namespace }}\",
               \"DeploymentType\": \"{{ deployment_type }}\",
               \"DeploymentName\": \"{{ deployment_name }}\",
               \"DisableRestoreHooks\": \"{{ disable_restore_hooks | lower }}\",
               \"PqSslMode\": \"disable\",
               \"PqHost\": \"{{ pq_host }}\",
               \"PqPort\": \"{{ pq_port }}\",
               \"PqUser\": \"{{ pq_user }}\",
               \"PqPassword\": \"{{ pq_password }}\",
               \"PqDb\": \"{{ pq_db }}\",
               \"PodSelector\": \"{{ pod_selector }}\",               
       }"
      body_format: json    
      force_basic_auth: yes
      status_code: [200]
      return_content: yes
    register: postgresql_config
    when: (app_plugin is defined) and (app_plugin == "postgres.so")
    failed_when: postgresql_config.json.messages[0].level == "ERROR"

  - name: Update postgresql app config status
    operator_sdk.util.k8s_status:
      api_version: fossul.io/v1
      kind: BackupConfig
      name: "{{ ansible_operator_meta.name }}"
      namespace: "{{ ansible_operator_meta.namespace }}"
      status:
        fossulResult: 
          appConfigStatus: "[{{ postgresql_config.json.messages[0].level }}] {{ postgresql_config.json.messages[0].message }}"
    when: (app_plugin is defined) and (app_plugin == "postgres.so")  

  rescue:
  - name: print postgresql app config
    debug:
      msg: "{{ postgresql_config }}"  
    when: (app_plugin is defined) and (app_plugin == "postgres.so")

  - name: Update postgresql app config status
    operator_sdk.util.k8s_status:
      api_version: fossul.io/v1
      kind: BackupConfig
      name: "{{ ansible_operator_meta.name }}"
      namespace: "{{ ansible_operator_meta.namespace }}"
      status:
        fossulResult: 
          appConfigStatus: "[{{ postgresql_config.json.messages[0].level }}] {{ postgresql_config.json.messages[0].message }}"
    when: (app_plugin is defined) and (app_plugin == "postgres.so")    

- name: Create Storage Plugin Config Block
  block:    
  - name: Create Storage Plugin Config
    uri:
      url: "{{fossul_server_url}}/addPluginConfig/{{ ansible_operator_meta.namespace }}/{{ deployment_name }}/{{ storage_plugin }}"
      headers:
        Content-Type: application/json
        Accept: application/json    
      user: "{{username}}"
      password: "{{fossul_password}}"
      method: POST
      body: "{ \"Namespace\": \"{{ ansible_operator_meta.namespace }}\",
               \"BackupName\": \"{{ deployment_name }}\",
               \"DeploymentName\": \"{{ deployment_name }}\",
               \"DeploymentType\": \"{{ deployment_type }}\",
               \"PvcDeletionTimeout\": \"{{ pvc_deletion_timeout }}\",
               \"SnapshotTimeoutSeconds\": \"{{ snapshot_timeout }}\",
               \"OverwritePvcOnRestore\": \"{{ overwrite_pcv_on_restore | lower }}\",
               \"RestoreToNewPvc\": \"{{ restore_to_new_pvc | lower }}\",
               \"PodSelector\": \"{{ pod_selector }}\",             
       }"

      body_format: json    
      force_basic_auth: yes
      status_code: [200]
      return_content: yes
    register: csi_config
    when: (storage_plugin is defined) and (storage_plugin == "csi.so")
    failed_when: csi_config.json.messages[0].level == "ERROR"

  - name: Update storage config status
    operator_sdk.util.k8s_status:
      api_version: fossul.io/v1
      kind: BackupConfig
      name: "{{ ansible_operator_meta.name }}"
      namespace: "{{ ansible_operator_meta.namespace }}"
      status:
        fossulResult: 
          storageConfigStatus: "[{{ csi_config.json.messages[0].level }}] {{ csi_config.json.messages[0].message }}"
    when: (storage_plugin is defined) and (storage_plugin == "csi.so")  

  rescue:
  - name: print storage config
    debug:
      msg: "{{ csi_config }}" 
    when: (storage_plugin is defined) and (storage_plugin == "csi.so")  

  - name: Update storage config status
    operator_sdk.util.k8s_status:
      api_version: fossul.io/v1
      kind: BackupConfig
      name: "{{ ansible_operator_meta.name }}"
      namespace: "{{ ansible_operator_meta.namespace }}"
      status:
        fossulResult: 
          storageConfigStatus: "[{{ csi_config.json.messages[0].level }}] {{ csi_config.json.messages[0].message }}"
    when: (storage_plugin is defined) and (storage_plugin == "csi.so")  
 
